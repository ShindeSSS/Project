#include <iostream>
#include <vector>

using namespace std;

// Define a struct to represent a route
struct Route {
    string source;
    string destination;
    int price;
};

// Define a vector to store all routes
vector<Route> routes;

// Function to find all direct journeys connecting two stops
vector<Route> findDirectJourneys(string source, string destination) {
    vector<Route> directJourneys;
    for (Route route : routes) {
        if (route.source == source && route.destination == destination) {
            directJourneys.push_back(route);
        }
    }
    return directJourneys;
}

// Function to find all journeys with one transfer connecting two stops
vector<Route> findIndirectJourneys(string source, string destination) {
    vector<Route> indirectJourneys;
    for (Route route1 : routes) {
        for (Route route2 : routes) {
            if (route1.source == source && route1.destination == route2.source && route2.destination == destination) {
                indirectJourneys.push_back(route1);
                indirectJourneys.push_back(route2);
            }
        }
    }
    return indirectJourneys;
}

int main() {
    // Add some routes to the vector
    routes.push_back(Route{"S0", "S1", 10});
    routes.push_back(Route{"S1", "S2", 20});
    routes.push_back(Route{"S2", "Sd", 30});
    routes.push_back(Route{"S0", "Sd", 40});

    // Find all direct journeys connecting S0 and Sd
    vector<Route> directJourneys = findDirectJourneys("S0", "Sd");

    // Print all direct journeys
    cout << "Direct journeys:" << endl;
    for (Route route : directJourneys) {
        cout << route.source << " -> " << route.destination << ": $" << route.price << endl;
    }

    // Find all journeys with one transfer connecting S0 and Sd
    vector<Route> indirectJourneys = findIndirectJourneys("S0", "Sd");

    // Print all journeys with one transfer
    cout << "Journeys with one transfer:" << endl;
    for (int i = 0; i < indirectJourneys.size(); i += 2) {
        cout << indirectJourneys[i].source << " -> " << indirectJourneys[i].destination << " -> " << indirectJourneys[i + 1].destination << ": $" << indirectJourneys[i].price + indirectJourneys[i + 1].price << endl;
    }

    return 0;
}
